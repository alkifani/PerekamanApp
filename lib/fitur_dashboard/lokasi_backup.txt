import 'package:flutter/material.dart';
import 'package:geolocator/geolocator.dart';
import 'package:permission_handler/permission_handler.dart'; // Import the permission_handler package
import 'dart:async';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart';
import 'dart:io';

class DashLocation extends StatefulWidget {
  @override
  _DashLocationState createState() => _DashLocationState();
}

class _DashLocationState extends State<DashLocation> {
  String _locationMessage = "";
  String _timestamp = ""; // Added for timestamp
  late Timer _locationTimer; // Declare the timer

  @override
  void initState() {
    super.initState();
    _checkLocationPermission();
    _startLocationUpdates(); // Start updating location every 2 seconds
  }

  @override
  void dispose() {
    _locationTimer.cancel(); // Cancel the timer in the dispose method
    super.dispose();
  }

  Future<void> _checkLocationPermission() async {
    if (await Permission.locationWhenInUse.isGranted) {
      _getCurrentLocation();
    } else {
      await Permission.locationWhenInUse.request();
      if (await Permission.locationWhenInUse.isGranted) {
        _getCurrentLocation();
      } else {
        setState(() {
          _locationMessage = "Location permission denied.";
        });
      }
    }
  }



  Future<void> _getCurrentLocation() async {
    try {
      // pengambilan data tdk menggunakan stream(terus menerus)
      Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.best,
      );

      String latitude = position.latitude.toString();
      String longitude = position.longitude.toString();
      String timestamp = DateTime.now().toLocal().toString();

      String csvData = 'Latitude,Longitude,Timestamp\n$latitude,$longitude,$timestamp';

      // Get the document directory for the app
      final Directory? directory = await getExternalStorageDirectory();

      if (directory != null) { // Check if directory is not null
        final String path = join(directory.path, 'location_data.csv');

        // Write to the file
        final File file = File(path);
        await file.writeAsString(csvData);

        // Show a message to the user
        setState(() {
          _locationMessage =
          "Latitude: $latitude\nLongitude: $longitude";
          _timestamp = "Date Time: $timestamp";
        });
      } else {
        setState(() {
          _locationMessage = "Error: Could not access storage directory.";
        });
      }
      // setState(() {
      //   _locationMessage =
      //   "Latitude: ${position.latitude}\nLongitude: ${position.longitude}";
      //   _timestamp = "Date Time: ${DateTime.now().toLocal().toString().substring(0, 19)}"; // Set the timestamp
      // });
    } catch (e) {
      setState(() {
        _locationMessage = "Error: $e";
      });
    }
  }

  void _startLocationUpdates() {
    _locationTimer = Timer.periodic(Duration(seconds: 2), (timer) {
      if (mounted) { // Check if the widget is still mounted before calling setState()
        _getCurrentLocation();
      } else {
        _locationTimer.cancel(); // Cancel the timer
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return
      Column(
        // mainAxisAlignment: MainAxisAlignment.center,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: <Widget>[
          // Text(
          //   'Current Location:',
          //   style: TextStyle(
          //       fontSize: 20,
          //       //color: Colors.white
          //   ),
          // ),
          //SizedBox(height: 10),
          Text(
            _locationMessage,
            style: TextStyle(
                fontSize: 16,
                color: Colors.orange
            ),
            textAlign: TextAlign.left,
          ),
          // SizedBox(height: 10), // Add some spacing
          // Text(
          //   _timestamp,
          //   style: TextStyle(fontSize: 16,
          //       //color: Colors.white
          //   ),
          //   textAlign: TextAlign.center,
          // ),
        ],
      )
    ;
  }
}
