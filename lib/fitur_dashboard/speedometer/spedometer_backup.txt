import 'package:flutter/material.dart';
import 'package:syncfusion_flutter_gauges/gauges.dart';

class Speedometer extends StatelessWidget {
  const Speedometer({
    Key? key,
    required this.gaugeBegin,
    required this.gaugeEnd,
    required this.velocity,
    required this.maxVelocity,
    required this.velocityUnit,
  }) : super(key: key);

  final double gaugeBegin;
  final double gaugeEnd;
  final double? velocity;
  final double? maxVelocity;
  final String velocityUnit;

  @override
  Widget build(BuildContext context) {
    final TextStyle _annotationTextStyle = TextStyle(
      fontSize: 20,
      fontWeight: FontWeight.bold,
      color: Colors.white,
    );

    final List<GaugePointer> pointers = [];

    if (maxVelocity != null) {
      pointers.add(
        NeedlePointer(
          value: maxVelocity!,
          needleLength: 0.95,
          enableAnimation: true,
          animationType: AnimationType.ease,
          needleStartWidth: 1.5,
          needleEndWidth: 6,
          needleColor: Colors.white54,
          knobStyle: const KnobStyle(knobRadius: 0.09),
        ),
      );
    }

    if (velocity != null) {
      pointers.add(
        NeedlePointer(
          value: velocity!,
          needleLength: 0.95,
          enableAnimation: true,
          animationType: AnimationType.ease,
          needleStartWidth: 1.5,
          needleEndWidth: 6,
          needleColor: Colors.red,
          knobStyle: const KnobStyle(knobRadius: 0.09),
        ),
      );
    }

    final String velocityText = velocity?.toStringAsFixed(2) ?? 'N/A';

    return SfRadialGauge(
      axes: <RadialAxis>[
        RadialAxis(
          minimum: gaugeBegin,
          maximum: gaugeEnd,
          labelOffset: 30,
          axisLineStyle: const AxisLineStyle(
            thicknessUnit: GaugeSizeUnit.factor,
            thickness: 0.03,
          ),
          majorTickStyle: const MajorTickStyle(
            length: 6,
            thickness: 4,
            color: Colors.white,
          ),
          minorTickStyle: const MinorTickStyle(
            length: 3,
            thickness: 3,
            color: Colors.white,
          ),
          axisLabelStyle: const GaugeTextStyle(
            color: Colors.white,
            fontWeight: FontWeight.bold,
            fontSize: 14,
          ),
          ranges: <GaugeRange>[
            GaugeRange(
              startValue: gaugeBegin,
              endValue: gaugeEnd,
              sizeUnit: GaugeSizeUnit.factor,
              startWidth: 0.03,
              endWidth: 0.03,
              gradient: const SweepGradient(
                colors: <Color>[Colors.green, Colors.yellow, Colors.red],
                stops: <double>[0.0, 0.5, 1],
              ),
            ),
          ],
          pointers: pointers,
          annotations: <GaugeAnnotation>[
            if (velocity != null)
              GaugeAnnotation(
                widget: Wrap(
                  alignment: WrapAlignment.center,
                  crossAxisAlignment: WrapCrossAlignment.center,
                  children: <Widget>[
                    Text(
                      velocityText,
                      style: _annotationTextStyle.copyWith(fontSize: 20),
                    ),
                    const SizedBox(width: 5),
                    Text(velocityUnit, style: _annotationTextStyle),
                  ],
                ),
                angle: 90,
                positionFactor: 0.8,
              ),
          ],
        ),
      ],
    );
  }
}
